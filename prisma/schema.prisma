// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(uuid())
  email      String       @unique
  password   String
  
  // Relations
  detailUser DetailUser[]

}

enum Prefix {
  Mr
  Mrs
}

enum IStatus {
  Active
  Inactive
}

model RoleTypes {
  id         String       @id @default(uuid())
  detailUser DetailUser[]
  role       String       @unique
}

model DetailUser {
  id          String     @id @default(uuid())
  
  userId      String?
  prefix      Prefix
  firstName   String
  lastName    String
  phone       Int
  status      IStatus
  
  position    String
  profilePath String
  // Relations
  User        User?      @relation(fields: [userId], references: [id])
  roleTypesId String?
  RoleTypes   RoleTypes? @relation(fields: [roleTypesId], references: [id])
}

model DetailReview {
  id          String     @id @default(uuid())
  dormitoryId String?
  dormitory   Dormitory? @relation(fields: [dormitoryId], references: [id])
  star        Int
  review      String
}
model Dormitory{
  id          String     @id @default(uuid())
  name        String
  description String
  totalUser   Int
  detailReview DetailReview[]
  detailDormitory DetailDormitory[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model DetailDormitory {
  id          String     @id @default(uuid())
  totalRooms Int
  BusyRooms  Int
  Dormitory  Dormitory? @relation(fields: [dormitoryId], references: [id])
  dormitoryId String?
}