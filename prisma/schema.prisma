// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String

  // Relations
  detailUser DetailUser?
}

enum IStatus {
  Active
  Inactive
}

enum Role {
  Admin
  Manager
  employee
}

model DetailUser {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  phone     String
  status    IStatus

  position    String
  profilePath String
  // Relations
  userId      String @unique
  user        User   @relation(fields: [userId], references: [id])
  role        Role

  Customer        Customer[]
  CustomerHistory CustomerHistory[]

  LineWeighing        LineWeighing[]
  LineWeighingHistory LineWeighingHistory[]
}

model Customer {
  id              String  @id @default(uuid())
  codeNumber      Int
  firstName       String
  lastName        String
  cardId          Int
  phone           Int
  carRegistration String
  status          IStatus

  // Relations
  User            DetailUser?       @relation(fields: [createdBy], references: [id])
  createdBy       String
  CustomerHistory CustomerHistory[]
}

model CustomerHistory {
  id         String   @id @default(uuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  updatedBy     String
  updatedByUser DetailUser @relation(fields: [updatedBy], references: [id])

  fieldName String
  oldValue  String?
  newValue  String?
  updatedAt DateTime @default(now())
}

enum Line {
  In
  Out
}

model LineWeighing {
  id           String @id @default(uuid())
  inputWeight  Float
  weightOut    Float
  netWeight    Float
  deductWeight Float
  totalMoney   Float
  averagePrice Float
  lineType     Line
  description  String
  status       IStatus

  // Relations
  User      DetailUser?           @relation(fields: [createdBy], references: [id])
  createdBy String
  histories LineWeighingHistory[]
}

model LineWeighingHistory {
  id             String       @id @default(uuid())
  lineWeighingId String
  lineWeighing   LineWeighing @relation(fields: [lineWeighingId], references: [id])

  updatedBy     String
  updatedByUser DetailUser @relation(fields: [updatedBy], references: [id])

  fieldName String
  oldValue  String?
  newValue  String?
  updatedAt DateTime @default(now())
}
